{"version":3,"sources":["logo.svg","components/Inputs/Inputs.jsx","components/Grid/Grid.jsx","App.js","reportWebVitals.js","index.js"],"names":["Inputs","onSubmit","this","props","for","type","name","Component","Grid","state","grid","gridSize","startPosition","currentPosition","directions","lost","Array","from","length","y","x","active","direction","setState","getStartPositionObj","setStartPosition","startGame","startPositionData","split","parseInt","Error","updatedGrid","JSON","parse","stringify","setTimeout","moveRobot","timeBetweenMovements","counter","moveAndDelay","movement","charAt","newPosition","gridDisplay","map","gridRow","className","gridCell","alt","src","process","App","key","sizeValidationError","onFormSubmit","bind","formData","preventDefault","gridValues","target","value","startPositionSplit","gameStarted","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ea98d82.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component } from \"react\";\r\nimport './Inputs.css';\r\n\r\n\r\nclass Inputs extends Component {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.props.onSubmit()}>\r\n                <label for=\"gridSize\">Grid Size</label>\r\n                <input type=\"text\" name=\"gridSize\"></input>\r\n\r\n                <label for=\"startPosition\">Starting Coordinates and Direction</label>\r\n                <input type=\"text\" name=\"startPosition\"></input>\r\n\r\n                <label for=\"directions\">Robot Directions</label>\r\n                <input type=\"text\" name=\"directions\"></input>\r\n\r\n                <label for=\"timeBetweenMovements\">Time between movements (In Milliseconds)</label>\r\n                <input type=\"text\" name=\"timeBetweenMovements\"></input>\r\n\r\n                <button type=\"submit\">Submit</button>\r\n            </form>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Inputs; ","import { Component } from 'react';\r\nimport './Grid.css';\r\n\r\nclass Grid extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            grid: [],\r\n            gridSize: this.props.gridSize,\r\n            startPosition: null,\r\n            currentPosition: null,\r\n            directions: null,\r\n            lost: false,\r\n        }\r\n    }\r\n\r\n    startGame() {\r\n        const grid = Array.from({ length: this.state.gridSize.y }, () => (Array.from({ length: this.state.gridSize.x }, () => ({ active: false, direction: null }))));\r\n\r\n        this.setState(\r\n            {\r\n                grid,\r\n                startPosition: this.getStartPositionObj(this.props.startPosition),\r\n                directions: this.props.directions\r\n            }, () => {\r\n                this.setStartPosition();\r\n            }\r\n        );\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startGame();\r\n    }\r\n\r\n    getStartPositionObj() {\r\n\r\n        const startPositionData = this.props.startPosition.split(' ');\r\n        startPositionData[0] = parseInt(startPositionData[0]);\r\n        startPositionData[1] = parseInt(startPositionData[1]);\r\n\r\n        switch (startPositionData[2]) {\r\n            case 'N':\r\n                startPositionData[2] = 0\r\n                break;\r\n\r\n            case 'E':\r\n                startPositionData[2] = 1\r\n                break;\r\n\r\n            case 'S':\r\n                startPositionData[2] = 2\r\n                break;\r\n\r\n            case 'W':\r\n                startPositionData[2] = 3\r\n                break;\r\n\r\n            default:\r\n                throw new Error('Expected start position direction to be either N, E, S, or W');\r\n        }\r\n\r\n        return {\r\n            x: startPositionData[0],\r\n            y: startPositionData[1],\r\n            direction: startPositionData[2]\r\n        }\r\n    }\r\n\r\n    setStartPosition() {\r\n        //Doing this to deep copy the multi-dim array from state\r\n        const updatedGrid = JSON.parse(JSON.stringify(this.state.grid));\r\n\r\n        const { startPosition } = this.state;\r\n\r\n        //Placing the robot on the correct cell in the grid\r\n        updatedGrid[startPosition.y][startPosition.x] = { active: true, direction: startPosition.direction }\r\n\r\n        // Doing a set timeout so the end user can actually see the movements in play\r\n            this.setState(\r\n                {\r\n                    grid: updatedGrid,\r\n                    currentPosition: startPosition\r\n                }\r\n                , () => setTimeout(() => this.moveRobot(), this.props.timeBetweenMovements))\r\n    }\r\n\r\n    moveRobot() {\r\n        const { directions } = this.state;\r\n        let counter = 0;\r\n\r\n\r\n        const moveAndDelay = movement => {\r\n            if (counter < directions.length) {\r\n                movement = directions.charAt(counter);\r\n                //Deep copying grid from state\r\n                const { currentPosition, grid, gridSize } = this.state\r\n\r\n                const updatedGrid = JSON.parse(JSON.stringify(grid));\r\n\r\n                const newPosition = {\r\n                    x: currentPosition.x,\r\n                    y: currentPosition.y,\r\n                    direction: currentPosition.direction\r\n                }\r\n\r\n                if (movement === 'F') {\r\n                    switch (currentPosition.direction) {\r\n                        case 0:\r\n                            newPosition.y = currentPosition.y + 1\r\n                            break;\r\n                        case 1:\r\n                            newPosition.x = currentPosition.x + 1\r\n                            break;\r\n                        case 2:\r\n                            newPosition.y = currentPosition.y - 1\r\n                            break;\r\n                        case 3:\r\n                            newPosition.x = currentPosition.x - 1\r\n                            break;\r\n                        default:\r\n                            throw new Error('Expected direction to be 0-3')\r\n                    }\r\n                } else {\r\n                    if (movement === 'R' && currentPosition.direction !== 3) {\r\n                        newPosition.direction = currentPosition.direction + 1;\r\n                    } else if (movement === 'R' && currentPosition.direction === 3) {\r\n                        newPosition.direction = 0;\r\n                    }\r\n\r\n                    if (movement === 'L' && currentPosition.direction !== 0) {\r\n                        newPosition.direction = currentPosition.direction - 1;\r\n                    } else if (movement === 'L' && currentPosition.direction === 0) {\r\n                        newPosition.direction = 3;\r\n                    }\r\n                }\r\n\r\n                if (newPosition.x > (gridSize.x - 1) ||\r\n                    newPosition.x < 0 ||\r\n                    newPosition.y > (gridSize.y - 1) ||\r\n                    newPosition.y < 0) {\r\n\r\n                    this.setState({\r\n                        lost: true,\r\n                    })\r\n                } else {\r\n\r\n                    updatedGrid[currentPosition.y][currentPosition.x] = { active: false, direction: null }\r\n                    updatedGrid[newPosition.y][newPosition.x] = { active: true, direction: newPosition.direction }\r\n                    \r\n                    // Doing a set timeout so the end user can actually see the movements in play\r\n                    setTimeout(() => {\r\n                        this.setState({\r\n                            grid: updatedGrid,\r\n                            currentPosition: newPosition\r\n                        });\r\n                        counter += 1;\r\n                        moveAndDelay();\r\n                    }, this.props.timeBetweenMovements)\r\n                }\r\n            }\r\n        }\r\n\r\n        moveAndDelay();\r\n\r\n    }\r\n\r\n    render() {\r\n\r\n        const gridDisplay = this.state.grid.map(gridRow => {\r\n            return (\r\n                <div className=\"gridRow\">\r\n                    {gridRow.map(gridCell => {\r\n                        if (gridCell.active) {\r\n                            switch (gridCell.direction) {\r\n                                case 0:\r\n                                    return <img className='upArrow' alt='Up Arrow' src={`${process.env.PUBLIC_URL}/arrow.svg`}></img>\r\n\r\n                                case 1:\r\n                                    return <img className='rightArrow' alt='Right Arrow' src={`${process.env.PUBLIC_URL}/arrow.svg`}></img>\r\n\r\n                                case 2:\r\n                                    return <img className='downArrow' alt='Down Arrow' src={`${process.env.PUBLIC_URL}/arrow.svg`}></img>\r\n\r\n                                case 3:\r\n                                    return <img className='leftArrow' alt='Left Arrow' src={`${process.env.PUBLIC_URL}/arrow.svg`}></img>\r\n\r\n                                default:\r\n                                    throw new Error('Expected a direction (0-3)');\r\n                            }\r\n                        } else {\r\n                            return <div className=\"gridCell\"></div>\r\n                        }\r\n                    })}\r\n                </div>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <>\r\n                {this.state.lost ? <h1>LOST AT {this.state.currentPosition.x} {this.state.currentPosition.y}</h1> : null}\r\n\r\n                <div className=\"gridContainer\">\r\n                    {gridDisplay}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Grid;","import logo from './logo.svg';\nimport './App.css';\nimport { Component } from 'react';\nimport Inputs from './components/Inputs/Inputs';\nimport Grid from './components/Grid/Grid';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      gridSize: {\n        x: 0,\n        y: 0,\n      },\n      startPosition: '0 0 N',\n      directions: '',\n      key: 0,\n      sizeValidationError: false\n    }\n\n    this.onFormSubmit = this.onFormSubmit.bind(this);\n  }\n\n  onFormSubmit(formData) {\n    formData.preventDefault();\n\n    const gridValues = formData.target[0].value.split(' ');\n    const gridSize = {\n      x: gridValues[0],\n      y: gridValues[1]\n    }\n    const startPosition = formData.target[1].value\n    const directions = formData.target[2].value;\n    const timeBetweenMovements = parseInt(formData.target[3].value);\n\n    const startPositionSplit = startPosition.split(' ');\n\n    if (gridSize.x > 50 || gridSize.y > 50 || startPositionSplit[0] > 50 || startPositionSplit[1] > 50) {\n      this.setState({\n        sizeValidationError: true\n      });\n    } else {\n      this.setState({\n        gridSize,\n        startPosition,\n        directions,\n        gameStarted: true,\n        timeBetweenMovements,\n        // I use key here because I need to remount <Grid /> whenever the input values are changed. Changing the key of a react component remounts it\n        key: this.state.key + 1,\n        sizeValidationError: false\n      })\n    }\n\n  }\n\n  render() {\n\n    const grid = <Grid\n      key={this.state.key}\n      gridSize={this.state.gridSize}\n      startPosition={this.state.startPosition}\n      directions={this.state.directions}\n      timeBetweenMovements={this.state.timeBetweenMovements}\n    />\n\n    return (\n        <div className=\"appContainer\">\n          {this.state.sizeValidationError ? <h1 className=\"validationError\">Grid Size or Coordinates Cannot Be Over 50</h1>: null}\n          <Inputs onSubmit={() => this.onFormSubmit} />\n          {this.state.gameStarted ? grid\n            :\n            null}\n\n        </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}